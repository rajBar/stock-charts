{"version":3,"sources":["components/DateAndStock/DateAndStock.jsx","store/actionTypes/stocks.js","store/actions/stocks.js","store/actionTypes/dates.js","store/selectors/stocks.js","containers/DateAndStocks.js","store/actions/dates.js","components/Charting/Charting.jsx","containers/Charting.js","components/Home/Home.jsx","containers/Home.js","App.js","store/reducers/stocks.js","store/reducers/dates.js","store/reducers/index.js","store/selectors/dates.js","store/sagas/stocksSagas.js","store/sagas/index.js","store/initialState.js","reportWebVitals.js","index.js","store/configureStore.js"],"names":["DateAndStock","props","today","Date","allStockNames","updateSelectedStocks","updateStartDate","updateEndDate","useState","getFullYear","getMonth","getDate","startDate","setStartDate","endDate","setEndDate","selectedStocks","setSelectedStocks","changeNumberOfStocks","add","newSelectedStocks","push","symbol","console","log","pop","selected","onChange","date","Math","round","getTime","amendStartDate","amendEndDate","length","value","event","newStocks","target","map","stock","name","i","onClick","FETCH_STOCKS","FETCH_STOCKS_SUCCESS","FETCH_STOCKS_FAILURE","UPDATE_SELECTED_STOCKS","ADD_SELECTED_STOCK_DATE","fetchStocksSuccess","stocks","type","actionTypes","payload","UPDATE_START_DATE","UPDATE_END_DATE","selectStockNamesAndSymbols","state","names","slice","forEach","description","selectSelectedStocks","selectChartData","selectedStockData","selectSelectedStockData","stockData","j","t","timeSeriesData","setUTCSeconds","c","h","l","o","label","data","connect","dispatch","actions","DateAndStocks","Charting","chartData","style","height","maxHeight","maxWidth","axes","primary","position","ownProps","dataType","Home","alerted","changeDataType","bind","a","publicIp","require","v4","ipv4","platform","isMobile","mobileVendor","mobileModel","navigator","url","this","fetch","method","setState","fetchAllStocks","notifyPhone","Component","App","className","initialState","error","action","fetchStocksFailure","addSelectedStockData","currentDate","rootReducer","combineReducers","dates","selectStartDate","selectEndDate","fetchStocksSaga","fetchSpecificStocksSaga","getStocks","then","res","json","call","put","getSpecificStock","stockLink","select","allStocks","currentStock","stocksWatcher","takeEvery","stocksSagas","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af18b3ec.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\nconst DateAndStock = props => {\r\n    const today = new Date();\r\n    const { allStockNames, updateSelectedStocks, updateStartDate, updateEndDate } = props;\r\n    const [startDate, setStartDate] = useState(new Date(today.getFullYear(), today.getMonth(), today.getDate()-7));\r\n    const [endDate, setEndDate] = useState(today);\r\n    const [selectedStocks, setSelectedStocks] = useState([\"\"])\r\n\r\n    const changeFirstStock = event => {\r\n        const newStocks = [...selectedStocks];\r\n        newStocks[0] = event.target.value;\r\n        setSelectedStocks(newStocks);\r\n        updateSelectedStocks(newStocks);\r\n    }\r\n\r\n    const changeSecondStock = event => {\r\n        const newStocks = [...selectedStocks];\r\n        newStocks[1] = event.target.value;\r\n        setSelectedStocks(newStocks);\r\n        updateSelectedStocks(newStocks);\r\n    }\r\n\r\n    const changeThirdStock = event => {\r\n        const newStocks = [...selectedStocks];\r\n        newStocks[2] = event.target.value;\r\n        setSelectedStocks(newStocks);\r\n        updateSelectedStocks(newStocks);\r\n    }\r\n\r\n    const changeNumberOfStocks = add => {\r\n        const newSelectedStocks = [...selectedStocks];\r\n        if (add) {\r\n            newSelectedStocks.push(allStockNames[0].symbol);\r\n            console.log(newSelectedStocks);\r\n            setSelectedStocks(newSelectedStocks);\r\n            updateSelectedStocks(newSelectedStocks);\r\n        } else {\r\n            newSelectedStocks.pop();\r\n            console.log(newSelectedStocks);\r\n            setSelectedStocks(newSelectedStocks);\r\n            updateSelectedStocks(newSelectedStocks);\r\n        }\r\n    }\r\n\r\n    const amendStartDate = date => {\r\n        setStartDate(date);\r\n        updateStartDate(Math.round(date.getTime() / 1000));\r\n    }\r\n\r\n    const amendEndDate = date => {\r\n        setEndDate(date);\r\n        updateEndDate(Math.round(date.getTime() / 1000));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                Start Date: <DatePicker selected={startDate} onChange={(date) => amendStartDate(date)} />\r\n                End Date: <DatePicker selected={endDate} onChange={(date) => amendEndDate(date)} />\r\n            </span>\r\n            <span>\r\n                {selectedStocks.length < 1 && <select value={selectedStocks[0]} onChange={changeFirstStock}>\r\n                    {allStockNames.map(stock => {\r\n                        return <option value={stock.symbol}>{stock.name}</option>\r\n                    })}\r\n                </select>}\r\n                {selectedStocks.length > 1 && <select value={selectedStocks[1]} onChange={changeSecondStock}>\r\n                    {allStockNames.map((stock, i) => {\r\n                        return <option value={stock.symbol}>{stock.name}</option>\r\n                    })}\r\n                </select>}\r\n                {selectedStocks.length > 2 && <select value={selectedStocks[2]} onChange={changeThirdStock}>\r\n                    {allStockNames.map(stock => {\r\n                        return <option value={stock.symbol}>{stock.name}</option>\r\n                    })}\r\n                </select>}\r\n                {selectedStocks.length < 3 && allStockNames.length > 0 && <button onClick={() => changeNumberOfStocks(true)}>Add Stock</button>}\r\n                {selectedStocks.length > 1 && <button onClick={() => changeNumberOfStocks(false)}>Remove Stock</button>}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateAndStock;","export const FETCH_STOCKS = 'FETCH_STOCKS';\r\nexport const FETCH_STOCKS_SUCCESS = 'FETCH_STOCKS_SUCCESS';\r\nexport const FETCH_STOCKS_FAILURE = 'FETCH_STOCKS_FAILURE';\r\n\r\nexport const UPDATE_SELECTED_STOCKS = 'UPDATE_SELECTED_STOCKS';\r\n\r\nexport const ADD_SELECTED_STOCK_DATE = 'ADD_SELECTED_STOCK_DATE';","import * as actionTypes from \"../actionTypes/stocks\";\r\n\r\nexport const fetchAllStocks = () => ({\r\n    type: actionTypes.FETCH_STOCKS,\r\n});\r\n\r\nexport const fetchStocksSuccess = stocks => ({\r\n    type: actionTypes.FETCH_STOCKS_SUCCESS,\r\n    payload: { stocks },\r\n});\r\n\r\nexport const fetchUsersFailure = error => ({\r\n    type: actionTypes.FETCH_STOCKS_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const updateSelectedStocks = stocks => ({\r\n    type: actionTypes.UPDATE_SELECTED_STOCKS,\r\n    payload: { stocks },\r\n})\r\n\r\nexport const addSelectedStockData = data => ({\r\n    type: actionTypes.ADD_SELECTED_STOCK_DATE,\r\n    payload: { data },\r\n})","export const UPDATE_START_DATE = 'UPDATE_START_DATE';\r\nexport const UPDATE_END_DATE = 'UPDATE_END_DATE';","export const selectStockNamesAndSymbols = state => {\r\n    const names = []\r\n    const size = 100;\r\n    const stocks = state.stocks.stocks.slice(0, size);\r\n    stocks.forEach(stock => names.push({name: stock.description, symbol: stock.symbol}));\r\n    return names;\r\n}\r\n\r\nexport const selectSelectedStocks = state => state.stocks.selectedStocks;\r\n\r\nexport const selectSelectedStockData = state => state.stocks.selectedStockData;\r\n\r\n\r\nexport const selectChartData = (state, type) => {\r\n    const allStockNames = selectStockNamesAndSymbols(state)\r\n    const selectedStockData = selectSelectedStockData(state);\r\n    const stockData = [];\r\n    selectedStockData.forEach((stock,j) => {\r\n        if (stock?.t) {\r\n            const timeSeriesData = [];\r\n            for (let i = 0; i < stock.t.length; i++) {\r\n                if (type === \"c\") timeSeriesData.push([new Date().setUTCSeconds(stock.t[i]), stock.c[i]]);\r\n                else if (type === \"h\") timeSeriesData.push([new Date().setUTCSeconds(stock.t[i]), stock.h[i]]);\r\n                else if (type === \"l\") timeSeriesData.push([new Date().setUTCSeconds(stock.t[i]), stock.l[i]]);\r\n                else if (type === \"o\") timeSeriesData.push([new Date().setUTCSeconds(stock.t[i]), stock.o[i]]);\r\n            }\r\n            stockData.push({\r\n                label: allStockNames[j].name,\r\n                data: timeSeriesData\r\n            })\r\n        }\r\n    })\r\n    return stockData;\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\nimport DateAndStocks from '../components/DateAndStock/DateAndStock';\r\nimport * as actions from \"../store/actions\";\r\nimport { selectStockNamesAndSymbols } from '../store/selectors/stocks';\r\n\r\nconst mapStateToProps = state => ({\r\n    allStockNames: selectStockNamesAndSymbols(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateSelectedStocks: stocks => dispatch(actions.updateSelectedStocks(stocks)),\r\n    updateStartDate: date => dispatch(actions.updateStartDate(date)),\r\n    updateEndDate: date => dispatch(actions.updateEndDate(date)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DateAndStocks);","import * as actionTypes from \"../actionTypes/dates\";\r\n\r\nexport const updateStartDate = date => ({\r\n    type: actionTypes.UPDATE_START_DATE,\r\n    payload: { date }\r\n})\r\n\r\nexport const updateEndDate = date => ({\r\n    type: actionTypes.UPDATE_END_DATE,\r\n    payload: { date }\r\n})\r\n","import React from 'react'\r\nimport { Chart } from 'react-charts'\r\n\r\nconst Charting = props => {\r\n    const { chartData } = props;\r\n\r\n    const axes = [\r\n        { primary: true, type: 'time', position: 'bottom' },\r\n        { type: 'linear', position: 'left' }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <div style={{height: \"600px\"}}>\r\n                {chartData.length > 0 && <Chart style={{maxHeight: \"500px\", maxWidth: \"inherit\"}} data={chartData} axes={axes} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charting;","import { connect } from 'react-redux';\r\nimport Charting from '../components/Charting/Charting';\r\nimport {selectChartData} from '../store/selectors/stocks';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { dataType } = ownProps;\r\n    return {\r\n        chartData: selectChartData(state, dataType),\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Charting);","import React, {Component} from 'react';\r\nimport {isMobile, mobileVendor, mobileModel} from 'react-device-detect';\r\nimport DateAndStock from \"../../containers/DateAndStocks\";\r\nimport Charting from \"../../containers/Charting\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alerted: false,\r\n            dataType: \"c\",\r\n        };\r\n\r\n        this.changeDataType = this.changeDataType.bind(this);\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const publicIp = require('public-ip');\r\n        const ipv4 = await publicIp.v4();\r\n        const platform = isMobile ? `${mobileVendor} ${mobileModel}` : navigator.platform;\r\n\r\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + platform + \"&site=Stocks\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            });\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fetchAllStocks } = this.props;\r\n        fetchAllStocks();\r\n    }\r\n\r\n    changeDataType(event) {\r\n        this.setState({\r\n            ...this.state,\r\n            dataType: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.notifyPhone();\r\n        const { dataType } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h3>Select up to 3 stocks and a Date Range</h3>\r\n                <DateAndStock />\r\n                <select value={dataType} onChange={this.changeDataType}>\r\n                    <option value={'c'}>Close Price</option>\r\n                    <option value={'h'}>High Price</option>\r\n                    <option value={'l'}>Low Price</option>\r\n                    <option value={'o'}>Open Price</option>\r\n                </select>\r\n                <Charting dataType={dataType} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import { connect } from 'react-redux';\r\nimport Home from '../components/Home/Home';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchAllStocks: () => dispatch(actions.fetchAllStocks()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import './App.css';\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import * as actionTypes from '../actionTypes/stocks';\r\n\r\nconst initialState = {\r\n    stocks: [],\r\n    selectedStocks: [\"\", \"\", \"\"],\r\n    selectedStockData: [],\r\n    error: null,\r\n};\r\n\r\nconst fetchStocksSuccess = (state, action) => ({\r\n    ...state,\r\n    stocks: action.payload.stocks,\r\n});\r\n\r\nconst fetchStocksFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst updateSelectedStocks = (state, action) => ({\r\n    ...state,\r\n    selectedStocks: action.payload.stocks,\r\n});\r\n\r\nconst addSelectedStockData = (state, action) => ({\r\n    ...state,\r\n    selectedStockData: action.payload.data,\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_STOCKS_SUCCESS:\r\n            return fetchStocksSuccess(state, action);\r\n        case actionTypes.FETCH_STOCKS_FAILURE:\r\n            return fetchStocksFailure(state, action);\r\n        case actionTypes.UPDATE_SELECTED_STOCKS:\r\n            return updateSelectedStocks(state, action);\r\n        case actionTypes.ADD_SELECTED_STOCK_DATE:\r\n            return addSelectedStockData(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as actionTypes from '../actionTypes/dates';\r\n\r\nconst currentDate = new Date();\r\n\r\nconst initialState = {\r\n    startDate: Math.round((currentDate.getTime() / 1000) - 604800),\r\n    endDate: Math.round(currentDate.getTime() / 1000),\r\n};\r\n\r\nconst updateStartDate = (state, action) => ({\r\n    ...state,\r\n    startDate: action.payload.date,\r\n});\r\n\r\nconst updateEndDate = (state, action) => ({\r\n    ...state,\r\n    endDate: action.payload.date,\r\n});\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.UPDATE_START_DATE:\r\n            return updateStartDate(state, action);\r\n        case actionTypes.UPDATE_END_DATE:\r\n            return updateEndDate(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport stocks from \"./stocks\";\r\nimport dates from \"./dates\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    stocks,\r\n    dates,\r\n})\r\n","export const selectStartDate = state => state.dates.startDate;\r\nexport const selectEndDate = state => state.dates.endDate;","import {call, put, select} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\nimport { selectStartDate, selectEndDate } from \"../selectors/dates\";\r\nimport { selectSelectedStocks } from \"../selectors/stocks\";\r\n\r\nconst getStocks = async () => {\r\n    const stocksLink = \"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=c6ck9eiad3i95gi9dn2g\";\r\n    return await fetch(stocksLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchStocksSaga() {\r\n    try {\r\n        const stocks = yield call(getStocks)\r\n        yield put(actions.fetchStocksSuccess(stocks));\r\n    } catch (error) {\r\n        yield put(actions.fetchUsersFailure(error));\r\n    }\r\n}\r\n\r\nconst getSpecificStock = async (startDate, endDate, symbol) => {\r\n    const stockLink = `https://finnhub.io/api/v1/stock/candle?symbol=${symbol}&resolution=1&from=${startDate}&to=${endDate}&token=c6ck9eiad3i95gi9dn2g`\r\n    return await fetch(stockLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchSpecificStocksSaga() {\r\n    try {\r\n        const startDate = yield select(selectStartDate);\r\n        const endDate = yield select(selectEndDate);\r\n        const allStocks = yield select(selectSelectedStocks);\r\n        const chartData = [];\r\n        for(let i = 0; i < allStocks.length; i++) {\r\n            const currentStock = yield call(getSpecificStock, startDate, endDate, allStocks[i]);\r\n            chartData.push(currentStock);\r\n        }\r\n        yield put(actions.addSelectedStockData(chartData));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actionTypes';\r\nimport * as stocksSagas from './stocksSagas';\r\n\r\nexport function* stocksWatcher() {\r\n    yield takeEvery(actionTypes.FETCH_STOCKS, stocksSagas.fetchStocksSaga);\r\n    yield takeEvery(actionTypes.UPDATE_SELECTED_STOCKS, stocksSagas.fetchSpecificStocksSaga);\r\n    yield takeEvery(actionTypes.UPDATE_START_DATE, stocksSagas.fetchSpecificStocksSaga);\r\n    yield takeEvery(actionTypes.UPDATE_END_DATE, stocksSagas.fetchSpecificStocksSaga);\r\n}","export const initialState = {};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { configureStore } from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport { initialState } from './store/initialState';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = configureStore(initialState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootReducer } from \"./reducers\";\r\nimport * as sagaWatchers from './sagas';\r\n\r\nexport function configureStore(initialState) {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    const enhancer = compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'stock-charts' })\r\n            : f => f,\r\n    )\r\n\r\n    const store = createStore(rootReducer, initialState, enhancer)\r\n\r\n    Object.keys(sagaWatchers).forEach(watcher => {\r\n        sagaMiddleware.run(sagaWatchers[watcher])\r\n    })\r\n\r\n    return store;\r\n}\r\n"],"sourceRoot":""}